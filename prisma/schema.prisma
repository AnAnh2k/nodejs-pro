// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// schema.prisma
model Session {
  id         String   @id
  sid        String   @unique
  data       String   @db.MediumText
  expiresAt  DateTime
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique@db.VarChar(255)
  password    String  @db.VarChar(255)
  fullName    String? @db.VarChar(255)
  address     String? @db.VarChar(255)
  phone       String? @db.VarChar(255)
  accountType String  @db.VarChar(50)
  avatar      String? @db.VarChar(255)
  roleId      Int
  role        Role   @relation(fields: [roleId], references: [id])
  carts    Cart?
  orders Order[]
  @@map("users")
}

model Role {
  id          Int     @id @default(autoincrement())
  name    String  @unique@db.VarChar(100)
  description    String  @db.VarChar(255)
  users User[]

  @@map("roles")
}



model Product {
  id          Int     @id @default(autoincrement())
  name        String   @db.VarChar(255)
  price       Int
  image       String?  @db.VarChar(255)
  detailDesc  String  @db.MediumText
  shortDesc   String  @db.VarChar(255)
  quantity    Int
  sold        Int?  @default(0)
  factory     String  @db.VarChar(255)
  target      String  @db.VarChar(255)
  cartDetails CartDetail[]
  orderDetails OrderDetail[]
    @@map("products")

}

model Cart {
  id          Int     @id @default(autoincrement())
  userId      Int @unique
  sum    Int
  user        User    @relation(fields: [userId], references: [id])
  cartDetails CartDetail[]
  @@map("carts")
}


model CartDetail {
  id          Int     @id @default(autoincrement())
  cartId      Int
  productId    Int
  quantity    Int
  price       Int
  cart        Cart    @relation(fields: [cartId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
  @@map("cart_detail")
}


model Order {
  id              Int          @id @default(autoincrement())
  totalPrice      Int
  receiverAddress String       @db.VarChar(255)
  receiverName    String       @db.VarChar(255)
  receiverPhone   String       @db.VarChar(255)
  status          String       @default("PENDING") // PENDING, CANCELED, COMPLETE
  paymentMethod   String // COD, BANKING...
  paymentStatus   String // PAYMENT_UNPAID, PAYMENT_SUCCEED, PAYMENT_FAILED
  paymentRef      String?
  user            User         @relation(fields: [userId], references: [id])
  userId          Int          
  orderDetails    OrderDetail[]

  @@map("orders")
}

model OrderDetail {
  id        Int     @id @default(autoincrement())
  price     Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  @@map("order_detail")
}




